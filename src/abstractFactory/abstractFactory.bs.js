// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_oo_curry = require("bs-platform/lib/js/caml_oo_curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");

var shared = [
  "createProductB",
  "createProductA"
];

var shared$1 = ["methodA"];

var shared$2 = [
  "createProductA",
  "createProductB"
];

var shared$3 = ["methodB"];

function abstractFactory_001($$class) {
  CamlinternalOO.get_method_labels($$class, shared);
  return (function (env, self) {
      return CamlinternalOO.create_object_opt(self, $$class);
    });
}

var abstractFactory = /* class */[
  undefined,
  abstractFactory_001,
  undefined,
  undefined
];

function productA1_init($$class) {
  var methodA = CamlinternalOO.get_method_label($$class, "methodA");
  CamlinternalOO.set_method($$class, methodA, (function (self$2) {
          return "This is methodA of ProductA1";
        }));
  return (function (env, self) {
      return CamlinternalOO.create_object_opt(self, $$class);
    });
}

var productA1 = CamlinternalOO.make_class(shared$1, productA1_init);

function productB1_init($$class) {
  var methodB = CamlinternalOO.get_method_label($$class, "methodB");
  CamlinternalOO.set_method($$class, methodB, (function (self$3) {
          return 1;
        }));
  return (function (env, self) {
      return CamlinternalOO.create_object_opt(self, $$class);
    });
}

var productB1 = CamlinternalOO.make_class(shared$3, productB1_init);

function productA2_init($$class) {
  var methodA = CamlinternalOO.get_method_label($$class, "methodA");
  CamlinternalOO.set_method($$class, methodA, (function (self$4) {
          return "This is methodA of ProductA2";
        }));
  return (function (env, self) {
      return CamlinternalOO.create_object_opt(self, $$class);
    });
}

var productA2 = CamlinternalOO.make_class(shared$1, productA2_init);

function productB2_init($$class) {
  var methodB = CamlinternalOO.get_method_label($$class, "methodB");
  CamlinternalOO.set_method($$class, methodB, (function (self$5) {
          return 2;
        }));
  return (function (env, self) {
      return CamlinternalOO.create_object_opt(self, $$class);
    });
}

var productB2 = CamlinternalOO.make_class(shared$3, productB2_init);

function concreteFactory1_init($$class) {
  var ids = CamlinternalOO.get_method_labels($$class, shared);
  var createProductB = ids[0];
  var createProductA = ids[1];
  var inh = CamlinternalOO.inherits($$class, 0, shared, 0, abstractFactory, true);
  var obj_init = inh[0];
  CamlinternalOO.set_methods($$class, [
        createProductA,
        (function (self$6) {
            return Curry._1(productA1[0], undefined);
          }),
        createProductB,
        (function (self$6) {
            return Curry._1(productB1[0], undefined);
          })
      ]);
  return (function (env, self) {
      var self$1 = CamlinternalOO.create_object_opt(self, $$class);
      Curry._1(obj_init, self$1);
      return CamlinternalOO.run_initializers_opt(self, self$1, $$class);
    });
}

var concreteFactory1 = CamlinternalOO.make_class(shared$2, concreteFactory1_init);

function concreteFactory2_init($$class) {
  var ids = CamlinternalOO.get_method_labels($$class, shared);
  var createProductB = ids[0];
  var createProductA = ids[1];
  var inh = CamlinternalOO.inherits($$class, 0, shared, 0, abstractFactory, true);
  var obj_init = inh[0];
  CamlinternalOO.set_methods($$class, [
        createProductA,
        (function (self$7) {
            return Curry._1(productA2[0], undefined);
          }),
        createProductB,
        (function (self$7) {
            return Curry._1(productB2[0], undefined);
          })
      ]);
  return (function (env, self) {
      var self$1 = CamlinternalOO.create_object_opt(self, $$class);
      Curry._1(obj_init, self$1);
      return CamlinternalOO.run_initializers_opt(self, self$1, $$class);
    });
}

var concreteFactory2 = CamlinternalOO.make_class(shared$2, concreteFactory2_init);

function testFactory_init($$class) {
  var factory = CamlinternalOO.new_variable($$class, "");
  var ids = CamlinternalOO.get_method_labels($$class, [
        "test",
        "createProductB",
        "createProductA"
      ]);
  var test = ids[0];
  var createProductB = ids[1];
  var createProductA = ids[2];
  CamlinternalOO.set_methods($$class, [
        createProductA,
        (function (self$8) {
            var tmp = self$8[factory];
            return Caml_oo_curry.js1(539744590, 1, tmp);
          }),
        createProductB,
        (function (self$8) {
            var tmp = self$8[factory];
            return Caml_oo_curry.js1(539744591, 2, tmp);
          }),
        test,
        (function (self$8, param) {
            var tmp = Curry._1(self$8[0][createProductA], self$8);
            console.log(Caml_oo_curry.js1(641535552, 3, tmp));
            var tmp$1 = Curry._1(self$8[0][createProductB], self$8);
            console.log(Caml_oo_curry.js1(641535553, 4, tmp$1));
            
          })
      ]);
  return (function (env, self, factory$1) {
      var self$1 = CamlinternalOO.create_object_opt(self, $$class);
      self$1[factory] = factory$1;
      return self$1;
    });
}

var testFactory = CamlinternalOO.make_class([
      "test",
      "createProductA",
      "createProductB"
    ], testFactory_init);

exports.abstractFactory = abstractFactory;
exports.productA1 = productA1;
exports.productB1 = productB1;
exports.productA2 = productA2;
exports.productB2 = productB2;
exports.concreteFactory1 = concreteFactory1;
exports.concreteFactory2 = concreteFactory2;
exports.testFactory = testFactory;
/* productA1 Not a pure module */
