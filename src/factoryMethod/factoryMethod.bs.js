// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var shared = ["method1"];

function abstractProduct_001($$class) {
  CamlinternalOO.get_method_label($$class, "method1");
  return (function (env, self) {
      return CamlinternalOO.create_object_opt(self, $$class);
    });
}

var abstractProduct = /* class */[
  undefined,
  abstractProduct_001,
  undefined,
  undefined
];

function concreteProductA_init($$class) {
  var method1 = CamlinternalOO.get_method_label($$class, "method1");
  var inh = CamlinternalOO.inherits($$class, 0, shared, 0, abstractProduct, true);
  var obj_init = inh[0];
  CamlinternalOO.set_method($$class, method1, (function (self$2) {
          return "This is method1 of ConcreteProductA";
        }));
  return (function (env, self) {
      var self$1 = CamlinternalOO.create_object_opt(self, $$class);
      Curry._1(obj_init, self$1);
      return CamlinternalOO.run_initializers_opt(self, self$1, $$class);
    });
}

var concreteProductA = CamlinternalOO.make_class(shared, concreteProductA_init);

function concreteProductB_init($$class) {
  var method1 = CamlinternalOO.get_method_label($$class, "method1");
  var inh = CamlinternalOO.inherits($$class, 0, shared, 0, abstractProduct, true);
  var obj_init = inh[0];
  CamlinternalOO.set_method($$class, method1, (function (self$3) {
          return "This is method of ConcreteProductB";
        }));
  return (function (env, self) {
      var self$1 = CamlinternalOO.create_object_opt(self, $$class);
      Curry._1(obj_init, self$1);
      return CamlinternalOO.run_initializers_opt(self, self$1, $$class);
    });
}

var concreteProductB = CamlinternalOO.make_class(shared, concreteProductB_init);

function productFactory_init($$class) {
  var productType = CamlinternalOO.new_variable($$class, "");
  var message = CamlinternalOO.new_variable($$class, "");
  var createProduct = CamlinternalOO.get_method_label($$class, "createProduct");
  CamlinternalOO.set_method($$class, createProduct, (function (self$4) {
          return Curry._1(self$4[message], self$4[productType]);
        }));
  return (function (env, self, productType$1) {
      var message$1 = function (productType) {
        if (productType === 65) {
          return Curry._1(concreteProductA[0], undefined);
        }
        if (productType !== 66) {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "factoryMethod.re",
                  17,
                  4
                ]
              ];
        }
        return Curry._1(concreteProductB[0], undefined);
      };
      var self$1 = CamlinternalOO.create_object_opt(self, $$class);
      self$1[message] = message$1;
      self$1[productType] = productType$1;
      return self$1;
    });
}

var productFactory = CamlinternalOO.make_class(["createProduct"], productFactory_init);

exports.abstractProduct = abstractProduct;
exports.concreteProductA = concreteProductA;
exports.concreteProductB = concreteProductB;
exports.productFactory = productFactory;
/* concreteProductA Not a pure module */
